
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
}

model User {
  id String @id @default(cuid())

  name String
  email String
  phoneNumber String?
  password String?
  avatarUrl String?
  isVerified Boolean @default(false)
  onBanned Boolean @default(false)

  role Role @default(USER)

  createdAt DateTime @default(now())
  verificationCode VerificationCode?
  certificates Certificate[]
  transactions Transaction[]
  coursesAccess CourseAccess[]
  eventsAccess EventAccess[]

}

model VerificationCode {
  id String @id @default(cuid())
  code String
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  lastSentAt DateTime @default(now())
}

model Course {
  id String @id @default(cuid())
  title String
  slug String
  description String
  price Int
  coverImage String
  isPublished Boolean @default(false)
  sections Section[]
  certificates Certificate[]
  flashSales FlashSale?
  transactions Transaction[]
  coursesAccess CourseAccess[]
  exams Exam[]
}

model Section {
  id String @id @default(cuid())
  title String
  index Int @default(0)
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  lessons Lesson[]
}

model Lesson {
  id String @id @default(cuid())
  title String
  slug String
  videoUrl String
  index Int @default(0)
  isPreview Boolean @default(false)
  sectionId String
  section Section @relation(fields: [sectionId], references: [id])
}

model FlashSale {
  id String @id @default(cuid())
  newAmount Int
  courseId String @unique
  course Course @relation(fields: [courseId], references: [id])
}

enum RequestStatus {
  UNDER_REVIEW
  APPROVED
  NO_REQUEST
}

model Certificate {
  id String @id @default(cuid())
  courseId String?
  course Course? @relation(fields: [courseId], references: [id])
  eventId String?
  event Event? @relation(fields: [eventId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  status RequestStatus @default(NO_REQUEST)
}

enum PaymentStatus {
  PAID
  UNPAID
}

model Transaction {
  id String @id @default(cuid())
  amount Int
  quantity Int @default(1)
  paymentStatus PaymentStatus @default(UNPAID)
  userId String
  user User @relation(fields: [userId], references: [id])

  courseId String?
  course Course? @relation(fields: [courseId], references: [id])
  
  eventId String?
  event Event? @relation(fields: [eventId], references: [id])
  
  paymentLink String?
  transactionId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseAccess {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  courseId String
  course Course @relation(fields: [courseId], references: [id])
}

model Exam {
  id String @id @default(cuid())
  title String
  index Int @default(0)
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  questions Question[]
  result Boolean @default(false)
  lock Boolean @default(false)
}

model Question {
  id String @id @default(cuid())
  title String
  index Int @default(0)
  isTrue Boolean @default(false)
  examId String
  exam Exam @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model Event {
  id String @id @default(cuid())
  title String
  slug String
  description String
  price Int
  price2 Int?
  price3 Int?
  specialPrice Int?
  coverImage String
  date String
  time String
  linkMaps String
  location String

  isPublished Boolean @default(false)

  transactions Transaction[]
  eventsAccess EventAccess[]
  certificates Certificate[]

}

model EventAccess {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  eventId String
  event Event @relation(fields: [eventId], references: [id])
  code String
  isActive Boolean @default(false)
}



model Form {
  id            String @id @default(cuid())
  name          String
  email         String
  phoneNumber   String
  images        String[]
  isVerified    Boolean @default(false)
  createdAt     DateTime @default(now())

  codeApp CodeApp?
}

model CodeApp {
  id            String @id @default(cuid())
  code          String
  formId        String @unique
  form Form     @relation(fields: [formId], references: [id])
  createdAt     DateTime @default(now())
  lastSentAt    DateTime @default(now())
}